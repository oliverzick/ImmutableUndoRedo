{"name":"ImmutableUndoredo","tagline":"A lightweight, flexible and easy to use do/undo/redo implementation based on immutable objects for .NET.","body":"# ImmutableUndoRedo\r\nA lightweight, flexible and easy to use do/undo/redo implementation based on immutable objects for .NET.\r\n\r\n# Getting started\r\nTo install ImmutableUndoRedo run the following command from the [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console):\r\n\r\n    PM> install-package ImmutableUndoRedo\r\n\r\n# Sample\r\n## Activity implementation\r\n\r\n    internal class Activity : IActivity<Activity>\r\n    {\r\n        private readonly int id;\r\n\r\n        private readonly int doCalls;\r\n\r\n        private readonly int undoCalls;\r\n\r\n        public Activity(int id)\r\n        {\r\n            this.id = id;\r\n        }\r\n\r\n        private Activity(int id, int doCalls, int undoCalls)\r\n            : this(id)\r\n        {\r\n            this.doCalls = doCalls;\r\n            this.undoCalls = undoCalls;\r\n        }\r\n\r\n        public Activity Do()\r\n        {\r\n            Console.WriteLine(\"Do activity #{0}\", this.id);\r\n\r\n            return new Activity(this.id, this.doCalls + 1, this.undoCalls);\r\n        }\r\n\r\n        public Activity Undo()\r\n        {\r\n            Console.WriteLine(\"Undo activity #{0}\", this.id);\r\n\r\n            return new Activity(this.id, this.doCalls, this.undoCalls + 1);\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return $\"Activity {{Id = {this.id}, #Do calls = {this.doCalls}, #Undo calls = {this.undoCalls}}}\";\r\n        }\r\n    }\r\n\r\n## Use of the History class\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var history = History<Activity>.Create()\r\n                                           .Do(new Activity(1))\r\n                                           .Do(new Activity(2))\r\n                                           .Do(new Activity(3))\r\n                                           .Do(new Activity(4))\r\n                                           .Do(new Activity(5))\r\n                                           .Undo()\r\n                                           .Undo()\r\n                                           .Undo()\r\n                                           .Redo();\r\n\r\n            Console.WriteLine(\"\\n\\nDone activities:\");\r\n            var done = new List<Activity>();\r\n            history.CopyDoneTo(done);\r\n            done.ForEach(Console.WriteLine);\r\n\r\n            Console.WriteLine(\"\\n\\nUndone activities:\");\r\n            var undone = new List<Activity>();\r\n            history.CopyUndoneTo(undone);\r\n            undone.ForEach(Console.WriteLine);\r\n\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n\r\n    // Console output:\r\n    Do activity #1\r\n    Do activity #2\r\n    Do activity #3\r\n    Do activity #4\r\n    Do activity #5\r\n    Undo activity #5\r\n    Undo activity #4\r\n    Undo activity #3\r\n    Do activity #3\r\n\r\n\r\n    Done activities:\r\n    Activity {Id = 1, #Do calls = 1, #Undo calls = 0}\r\n    Activity {Id = 2, #Do calls = 1, #Undo calls = 0}\r\n    Activity {Id = 3, #Do calls = 2, #Undo calls = 1}\r\n\r\n\r\n    Undone activities:\r\n    Activity {Id = 5, #Do calls = 1, #Undo calls = 1}\r\n    Activity {Id = 4, #Do calls = 1, #Undo calls = 1}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}